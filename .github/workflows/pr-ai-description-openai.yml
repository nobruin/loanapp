name: Auto PR Description (OpenAI)

on:
  pull_request:
    types: [opened, synchronize]

jobs:
  generate-pr-description:
    name: Generate PR Description via OpenAI
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
      contents: read

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Collect commit messages
        id: collect
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          PR_NUMBER="${{ github.event.pull_request.number }}"
          COMMITS=$(gh api "repos/${{ github.repository }}/pulls/$PR_NUMBER/commits" --jq '.[].commit.message' | sed 's/^/- /')
          if [ -z "$COMMITS" ]; then
            COMMITS="Initial commit for PR #$PR_NUMBER"
          fi
          {
            echo "commits<<EOF"
            echo "$COMMITS"
            echo "EOF"
          } >> "$GITHUB_OUTPUT"

      - name: Generate PR description with OpenAI
        id: openai
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: |
          set -e
          echo "OpenAI key length: ${#OPENAI_API_KEY}"

          COMMITS_CONTENT="${{ steps.collect.outputs.commits }}"

          # PROMPT multiline seguro
          read -r -d '' PROMPT <<'EOF' || true
          You are an assistant that writes concise, professional GitHub Pull Request descriptions.
          Summarize the following commits in markdown with clear sections:
          - **Summary:** short overview
          - **Details:** bullet points for technical work
          - **Impact:** mention affected modules, risks, or backward compatibility
          EOF
  
            # Monta JSON com jq (evita problemas de escape)
            JSON_BODY=$(jq -n \
            --arg model "gpt-4o-mini" \
            --arg sys "$PROMPT" \
            --arg usr "Commits:\n$COMMITS_CONTENT" \
            --argjson temp 0.4 \
            '{
          model: $model,
          temperature: $temp,
          messages: [
            {role: "system", content: $sys},
            {role: "user", content: $usr}
          ]
          }')

          echo "JSON request:"
          echo "$JSON_BODY" | jq '.'
  
          RESPONSE=$(curl --http1.1 -s -w "\n%{http_code}" -X POST "https://api.openai.com/v1/chat/completions" \
          -H "Authorization: Bearer $OPENAI_API_KEY" \
          -H "Content-Type: application/json" \
          -d "$JSON_BODY")
          
          HTTP_CODE=$(echo "$RESPONSE" | tail -n1)
          BODY_JSON=$(echo "$RESPONSE" | sed '$d')
          
          echo "OpenAI response ($HTTP_CODE):"
          echo "$BODY_JSON" | jq '.' || echo "$BODY_JSON"
          
          if [ "$HTTP_CODE" -ne 200 ]; then
          echo "OpenAI API returned HTTP $HTTP_CODE"
          exit 1
          fi
          
          DESC=$(echo "$BODY_JSON" | jq -r '.choices[0].message.content // empty')
          if [ -z "$DESC" ]; then
          DESC="⚠️ Failed to generate PR description automatically."
          fi
          
          {
            echo "body<<EOF"
            echo "$DESC"
            echo "EOF"
          } >> "$GITHUB_OUTPUT"
          
          - name: Update PR description
            env:
              GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
            run: |
              gh api "repos/${{ github.repository }}/pulls/${{ github.event.pull_request.number }}" \
                -X PATCH \
                -f body='${{ steps.openai.outputs.body }}'
